// create tasks for subprojects
subprojects { subproject ->
    // get right configuration for the subproject
    def config = rootProject.ext.configMap["$subproject.name"]

    task estimateTongueThreshold {

        def dataset = config.speaker.dataset
        def speaker = config.speaker.name
        def scanPath = config.speaker.scanPath

        def phonemesFile = file("$rootProject.rootDir/configuration/$dataset.name/database.json")
        def slurper = new groovy.json.JsonSlurper()
        def phonemes = slurper.parse(phonemesFile)

        def outputFile = file("$rootProject.buildDir/$dataset.name/$speaker/estimateTongueThreshold/threshold.json")

        phonemes.findAll{it.missing == false && it.speaker == speaker}.each{

            def basePath = "$dataset.name/$it.speaker/$it.id"
            dependsOn ":projects:shared:$dataset.name-$it.speaker-$it.id:cropToVocalTract"
            inputs.file file("$rootProject.buildDir/$basePath/cropToVocalTract/vocaltract.json")
            inputs.file file("$landmarksTongueDir/$basePath/landmarks.json")

        }

        outputs.file outputFile

        doLast{

            outputFile.parentFile.mkdirs()

            def scans = []
            def landmarks = []
            phonemes.findAll{it.missing == false && it.speaker == speaker}.each{

                def basePath = "$dataset.name/$it.speaker/$it.id"
                scans.add(file("$rootProject.buildDir/$basePath/cropToVocalTract/vocaltract.json"))
                landmarks.add(file("$landmarksTongueDir/$basePath/landmarks.json"))

            }

            def cmd = "estimate-threshold-with-landmarks --images ${scans.join(' ')} --landmarks ${landmarks.join(' ')} --scale_to_8bit --output $outputFile"

            exec{

                commandLine cmd.tokenize()
                workingDir rootProject.buildDir

            }

        }

    }

}
